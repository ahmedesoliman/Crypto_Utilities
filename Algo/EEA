# # Python program to demonstrate working of extended
# # Euclidean Algorithm

# # function for extended Euclidean Algorithm
import math
arr = []
invArr = []
def extended_euclid_gcd(a, b):
  """
    Returns a list `result` of size 3 where:
    Referring to the equation ax + by = gcd(a, b)
        result[0] is gcd(a, b)
        result[1] is x
        result[2] is y 
    """
  arr.insert(0, a)
  arr.insert(1, b)
  s = 0
  old_s = 1
  t = 1
  old_t = 0
  r = b
  old_r = a
  inv = 0

  while r != 0:
    quotient = old_r // r  # In Python, // operator performs integer or floored division

    # This is a pythonic way to swap numbers
    old_r, r = r, old_r - quotient * r
    old_s, s = s, old_s - quotient * s
    old_t, t = t, old_t - quotient * t
    arr.append(r)
  inv = (old_t % a)
  invArr.append(inv)
  return [old_r, old_s, old_t]
  

res = extended_euclid_gcd(32, 29)

print('GCD is: %d s = %d && t = %d' % (res[0], res[1], res[2]))
# Output: GCD of 24 and 18 is 6. x = 1 and y = -1 in 24x + 18y = gcd(24, 18)

print(arr)
print("Inverse is: ", invArr)
